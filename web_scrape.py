import requests
import json
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import pandas as pd
import time
import os
import warnings
from dotenv import load_dotenv, find_dotenv
from db_management import create_initial_table, update_table
import numpy as np
from requests import JSONDecodeError

load_dotenv(find_dotenv())
warnings.filterwarnings("ignore")

# load env variables
env_file = find_dotenv(".env")
load_dotenv(env_file)

# get env variables
key_free = os.environ.get("api_keys")
apex_legends_website = os.environ.get("apex_legends_website")
path = os.environ.get("chromium_path")

# load the website
driver = webdriver.Chrome(path)
driver.get(apex_legends_website)

def get_profiles(ids):
    
    """makes a list of all of the platform and UID pairs using the random profiles generated by the website.

    Args:
      ids: (int) how many ids will be added to the list.

    Returns:
      plat_uid_pairs: (dict) dict of all of the platform and UID pairs.

    """

    plat_uid_pairs = {}

    for i in range(1,ids):

        time.sleep(1)

        driver.refresh()
        
        lnks = driver.find_elements(By.TAG_NAME, "a")

        link = lnks[-5].get_attribute("href")

        values = [link.split('/')[-2]]
    
        keys = [link.split('/')[-1]]

        # excluding switch platform

        if values != 'SWITCH':
            plat_uid_pairs.update(dict(zip(keys, values)))
        
        
    driver.quit()

    return plat_uid_pairs

def create_df():
   """creates an empty dataframe in the database format.

   Returns:
      df: (dataframe) empty dataframe in the database format.

   """
   df = pd.DataFrame(columns=["uid",
                           #    "platform",
                              "username",
                              "level",
                              "rankscore", 
                              "rank", 
                              "skin", 
                              "skinrarity", 
                              "kd", 
                              "kills", 
                              "damage",
                              "top_3",
                              "games_played",
                              "date_accessed"])
   return df

def get_data(plat_uid_pairs, df):
    """makes an api request for each platform and UID pair and appends the results to the dataframe.

    Args:
        plat_uid_pairs: (dict) dict of all of the platform and UID pairs.
    
    Returns:
        df: (dataframe) dataframe with all of the data from the api requests.

    errors:
        JSONDecodeError: if the api request fails, the function will try again. This happens when the api
        request is made on switch platform.
    """
    for key, value in plat_uid_pairs.items():
        try:
            time.sleep(3)

            
            free_api_url = f'https://api.mozambiquehe.re/bridge?version=5&platform={value}&UID={key}&auth={key_free}'

            params = {'platform': value,
                'uid': key,
                }
            response = requests.get(free_api_url, params=params,  timeout=5)

            test = response.json()

            try:
                kd = test['total']['kd']['value']
            except KeyError:
                
                kd = np.nan
            try:
                skinrarity = test['legends']['selected']['gameInfo']['skinRarity']
            except KeyError:
                
                skinrarity = np.nan
            try:
                skin = test['legends']['selected']['gameInfo']['skin']
            except KeyError:
                
                skin = np.nan
            try:
                rank = test['global']['rank']['rankName']
            except KeyError:
                
                rank = np.nan
            try:
                rankscore = test['global']['rank']['rankScore']
            except KeyError:
                
                rankscore = np.nan
            try:
                level = test['global']['level']
            except KeyError:
                
                level = np.nan
            try:
                username = test['global']['name']
            except KeyError:
                
                username = np.nan
            try:
                uid = test['global']['uid']
            except KeyError:
                
                uid = np.nan
            try:
                kills = test['total']['kills']['value']
            except KeyError:
                
                kills = np.nan
            try:
                damage = test['total']['damage']['value']
            except KeyError:
                
                damage = np.nan
            try:
                top_3 = test['total']['top_3']['value']
            except KeyError:
                
                top_3 = np.nan
            try:
                games_played = test['total']['games_played']['value']
            except KeyError:
                
                games_played = np.nan
            
            df = df.append({'uid': uid,
                            # 'platform': platform,
                            'username': username,
                            'level': level, 
                            'rankscore': rankscore, 
                            'rank': rank, 
                            'skin': skin, 
                            'skinrarity': skinrarity, 
                            'kd': kd, 
                            'kills': kills, 
                            'damage': damage, 
                            'top_3': top_3, 
                            'games_played': games_played,
                            'date_accessed': time.strftime("%Y-%m-%d")}, ignore_index=True)

        except JSONDecodeError:
            print(key, value)
            continue
    return df

def scrape(ids):
    """runs the functions to create the dataframe and append the data to the dataframe.

    Args:
        ids: (int) how many ids will be requested through the api. 
        Note: some ids are not valid and will not return data. This is why the number of ids requested is greater 
        than the number of rows in the dataframe. 

    Returns:
        df: (dataframe) dataframe with all of the data from the api requests.

    """
    print("getting profiles from website")
    plat_uid_pairs = get_profiles(ids)

    print("creating empty dataframe")
    temp = create_df()

    print("getting data from API")
    df = get_data(plat_uid_pairs, temp)

    print("scrape function complete")

    return df, len(df)

def main(add, table_name):
    """main function to run the program.

    Args:
        add: (int) how many ids will be added to the list.
        table_name: (str) name of the table to be created.

    Returns:
        None

    """

    df, len = scrape(add)

    update_table(table_name, df)

    print(f'{table_name} table updated with {len} new rows')

    return None

if __name__ == "__main__":
    main(10, 'api_rank_s15')

